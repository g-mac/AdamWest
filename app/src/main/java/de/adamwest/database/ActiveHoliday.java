package de.adamwest.database;

import de.adamwest.database.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table ACTIVE_HOLIDAY.
 */
public class ActiveHoliday {

    private String active;
    private Long holidayId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ActiveHolidayDao myDao;

    private Holiday holiday;
    private Long holiday__resolvedKey;


    public ActiveHoliday() {
    }

    public ActiveHoliday(String active) {
        this.active = active;
    }

    public ActiveHoliday(String active, Long holidayId) {
        this.active = active;
        this.holidayId = holidayId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getActiveHolidayDao() : null;
    }

    public String getActive() {
        return active;
    }

    public void setActive(String active) {
        this.active = active;
    }

    public Long getHolidayId() {
        return holidayId;
    }

    public void setHolidayId(Long holidayId) {
        this.holidayId = holidayId;
    }

    /** To-one relationship, resolved on first access. */
    public Holiday getHoliday() {
        Long __key = this.holidayId;
        if (holiday__resolvedKey == null || !holiday__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            HolidayDao targetDao = daoSession.getHolidayDao();
            Holiday holidayNew = targetDao.load(__key);
            synchronized (this) {
                holiday = holidayNew;
            	holiday__resolvedKey = __key;
            }
        }
        return holiday;
    }

    public void setHoliday(Holiday holiday) {
        synchronized (this) {
            this.holiday = holiday;
            holidayId = holiday == null ? null : holiday.getId();
            holiday__resolvedKey = holidayId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
