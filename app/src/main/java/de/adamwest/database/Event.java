package de.adamwest.database;

import de.adamwest.database.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table EVENT.
 */
public class Event {

    private Long id;
    private String name;
    private String description;
    private String type;
    private String path;
    private java.util.Date createdAt;
    private Long locationId;
    private Long routeId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient EventDao myDao;

    private RouteLocation routeLocation;
    private Long routeLocation__resolvedKey;


    public Event() {
    }

    public Event(Long id) {
        this.id = id;
    }

    public Event(Long id, String name, String description, String type, String path, java.util.Date createdAt, Long locationId, Long routeId) {
        this.id = id;
        this.name = name;
        this.description = description;
        this.type = type;
        this.path = path;
        this.createdAt = createdAt;
        this.locationId = locationId;
        this.routeId = routeId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getEventDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public String getPath() {
        return path;
    }

    public void setPath(String path) {
        this.path = path;
    }

    public java.util.Date getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(java.util.Date createdAt) {
        this.createdAt = createdAt;
    }

    public Long getLocationId() {
        return locationId;
    }

    public void setLocationId(Long locationId) {
        this.locationId = locationId;
    }

    public Long getRouteId() {
        return routeId;
    }

    public void setRouteId(Long routeId) {
        this.routeId = routeId;
    }

    /** To-one relationship, resolved on first access. */
    public RouteLocation getRouteLocation() {
        Long __key = this.locationId;
        if (routeLocation__resolvedKey == null || !routeLocation__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RouteLocationDao targetDao = daoSession.getRouteLocationDao();
            RouteLocation routeLocationNew = targetDao.load(__key);
            synchronized (this) {
                routeLocation = routeLocationNew;
            	routeLocation__resolvedKey = __key;
            }
        }
        return routeLocation;
    }

    public void setRouteLocation(RouteLocation routeLocation) {
        synchronized (this) {
            this.routeLocation = routeLocation;
            locationId = routeLocation == null ? null : routeLocation.getId();
            routeLocation__resolvedKey = locationId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
